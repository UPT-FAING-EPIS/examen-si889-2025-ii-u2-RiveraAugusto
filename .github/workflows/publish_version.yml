name: Publicar versión (build, tests, cobertura y release)

on:
  push:
    branches: [ "main" ]
    tags:
      - "v*"
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build_test_coverage:
    name: Compilar, ejecutar tests y generar cobertura
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Instalar Doxygen y Graphviz
        run: |
          sudo apt-get update
          sudo apt-get install -y doxygen graphviz

      - name: Generar Doxyfile si no existe
        run: |
          if [ ! -f Doxyfile ]; then
            doxygen -g Doxyfile
          fi

      - name: Configurar Doxygen (HTML y diagramas)
        run: |
          {
            echo "# --- Overrides para GitHub Actions ---"
            echo "OUTPUT_DIRECTORY = site"
            echo "GENERATE_HTML = YES"
            echo "RECURSIVE = YES"
            echo "EXTRACT_ALL = YES"
            echo "FILE_PATTERNS = *.cs"
            echo "HAVE_DOT = YES"
            echo "CLASS_DIAGRAMS = YES"
            echo "CALL_GRAPH = YES"
            echo "COLLABORATION_GRAPH = YES"
            echo "TEMPLATE_RELATIONS = YES"
            echo "DOT_IMAGE_FORMAT = svg"
            echo "DOT_GRAPH_MAX_NODES = 250"
            echo "GENERATE_TREEVIEW = YES"
            echo "QUIET = YES"
          } >> Doxyfile
          if [ -d src ]; then
            echo "INPUT = src" >> Doxyfile
          else
            echo "INPUT = ." >> Doxyfile
          fi

      - name: Ejecutar Doxygen (genera documentación y diagramas)
        run: doxygen Doxyfile

      - name: Restore proyectos
        run: |
          dotnet restore src/AccessControl/AccessControl.csproj
          dotnet restore tests/AccessControl.Tests/AccessControl.Tests.csproj

      - name: Build
        run: dotnet build src/AccessControl/AccessControl.csproj --configuration Release --no-restore

      - name: Build tests
        run: dotnet build tests/AccessControl.Tests/AccessControl.Tests.csproj --configuration Release --no-restore

      - name: Test con cobertura
        run: dotnet test tests/AccessControl.Tests/AccessControl.Tests.csproj --configuration Release --no-build --collect "XPlat Code Coverage"

      - name: Instalar ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generar reporte HTML de cobertura
        env:
          PATH: ${{ env.PATH }}:~/.dotnet/tools
        run: |
          export PATH="$PATH:~/.dotnet/tools"
          reportgenerator -reports:**/coverage.cobertura.xml -targetdir:coverage-report -reporttypes:Html

      - name: Preparar sitio para Pages (docs + cobertura)
        run: |
          mkdir -p pages-site/docs
          mkdir -p pages-site/coverage
          cp -r site/html/* pages-site/docs/
          cp -r coverage-report/* pages-site/coverage/

      - name: Subir artefacto para GitHub Pages (docs + cobertura)
        uses: actions/upload-pages-artifact@v3
        with:
          path: pages-site

      - name: Subir artefacto de cobertura para release
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: coverage-report

  deploy_pages:
    name: Publicar cobertura en GitHub Pages
    runs-on: ubuntu-latest
    needs: build_test_coverage
    if: github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

  release:
    name: Crear release con artefactos
    runs-on: ubuntu-latest
    needs: build_test_coverage
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Restore
        run: dotnet restore

      - name: Build Release
        run: dotnet build src/AccessControl/AccessControl.csproj --configuration Release --no-restore

      - name: Recopilar binarios compilados
        run: |
          mkdir -p build-artifacts
          cp -r src/AccessControl/bin/Release build-artifacts/

      - name: Descargar artefacto de cobertura
        uses: actions/download-artifact@v4
        with:
          name: coverage-html
          path: build-artifacts/coverage

      - name: Publicar GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            Build y pruebas exitosas.
            Se incluye reporte de cobertura (HTML) y binarios compilados.
          files: |
            build-artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}